{
  "version": 3,
  "sources": ["browser-external:fs", "../../@google/generative-ai/dist/server/index.mjs"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import { readFileSync } from 'fs';\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Basic error type for this SDK.\n * @public\n */\nclass GoogleGenerativeAIError extends Error {\n    constructor(message) {\n        super(`[GoogleGenerativeAI Error]: ${message}`);\n    }\n}\n/**\n * Error class covering HTTP errors when calling the server. Includes HTTP\n * status, statusText, and optional details, if provided in the server response.\n * @public\n */\nclass GoogleGenerativeAIFetchError extends GoogleGenerativeAIError {\n    constructor(message, status, statusText, errorDetails) {\n        super(message);\n        this.status = status;\n        this.statusText = statusText;\n        this.errorDetails = errorDetails;\n    }\n}\n/**\n * Errors in the contents of a request originating from user input.\n * @public\n */\nclass GoogleGenerativeAIRequestInputError extends GoogleGenerativeAIError {\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_BASE_URL = \"https://generativelanguage.googleapis.com\";\nconst DEFAULT_API_VERSION = \"v1beta\";\n/**\n * We can't `require` package.json if this runs on web. We will use rollup to\n * swap in the version number here at build time.\n */\nconst PACKAGE_VERSION = \"0.16.0\";\nconst PACKAGE_LOG_HEADER = \"genai-js\";\nvar Task;\n(function (Task) {\n    Task[\"GENERATE_CONTENT\"] = \"generateContent\";\n    Task[\"STREAM_GENERATE_CONTENT\"] = \"streamGenerateContent\";\n    Task[\"COUNT_TOKENS\"] = \"countTokens\";\n    Task[\"EMBED_CONTENT\"] = \"embedContent\";\n    Task[\"BATCH_EMBED_CONTENTS\"] = \"batchEmbedContents\";\n})(Task || (Task = {}));\n/**\n * Simple, but may become more complex if we add more versions to log.\n */\nfunction getClientHeaders(requestOptions) {\n    const clientHeaders = [];\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {\n        clientHeaders.push(requestOptions.apiClient);\n    }\n    clientHeaders.push(`${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`);\n    return clientHeaders.join(\" \");\n}\nasync function makeRequest(url, fetchOptions, fetchFn = fetch) {\n    let response;\n    try {\n        response = await fetchFn(url, fetchOptions);\n    }\n    catch (e) {\n        handleResponseError(e, url);\n    }\n    if (!response.ok) {\n        await handleResponseNotOk(response, url);\n    }\n    return response;\n}\nfunction handleResponseError(e, url) {\n    let err = e;\n    if (!(e instanceof GoogleGenerativeAIFetchError ||\n        e instanceof GoogleGenerativeAIRequestInputError)) {\n        err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);\n        err.stack = e.stack;\n    }\n    throw err;\n}\nasync function handleResponseNotOk(response, url) {\n    let message = \"\";\n    let errorDetails;\n    try {\n        const json = await response.json();\n        message = json.error.message;\n        if (json.error.details) {\n            message += ` ${JSON.stringify(json.error.details)}`;\n            errorDetails = json.error.details;\n        }\n    }\n    catch (e) {\n        // ignored\n    }\n    throw new GoogleGenerativeAIFetchError(`Error fetching from ${url.toString()}: [${response.status} ${response.statusText}] ${message}`, response.status, response.statusText, errorDetails);\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RpcTask;\n(function (RpcTask) {\n    RpcTask[\"UPLOAD\"] = \"upload\";\n    RpcTask[\"LIST\"] = \"list\";\n    RpcTask[\"GET\"] = \"get\";\n    RpcTask[\"DELETE\"] = \"delete\";\n    RpcTask[\"UPDATE\"] = \"update\";\n    RpcTask[\"CREATE\"] = \"create\";\n})(RpcTask || (RpcTask = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst taskToMethod = {\n    [RpcTask.UPLOAD]: \"POST\",\n    [RpcTask.LIST]: \"GET\",\n    [RpcTask.GET]: \"GET\",\n    [RpcTask.DELETE]: \"DELETE\",\n    [RpcTask.UPDATE]: \"PATCH\",\n    [RpcTask.CREATE]: \"POST\",\n};\nclass ServerRequestUrl {\n    constructor(task, apiKey, requestOptions) {\n        this.task = task;\n        this.apiKey = apiKey;\n        this.requestOptions = requestOptions;\n    }\n    appendPath(path) {\n        this._url.pathname = this._url.pathname + `/${path}`;\n    }\n    appendParam(key, value) {\n        this._url.searchParams.append(key, value);\n    }\n    toString() {\n        return this._url.toString();\n    }\n}\nclass CachedContentUrl extends ServerRequestUrl {\n    constructor(task, apiKey, requestOptions) {\n        var _a, _b;\n        super(task, apiKey, requestOptions);\n        this.task = task;\n        this.apiKey = apiKey;\n        this.requestOptions = requestOptions;\n        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;\n        const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;\n        let initialUrl = baseUrl;\n        initialUrl += `/${apiVersion}/cachedContents`;\n        this._url = new URL(initialUrl);\n    }\n}\nclass FilesRequestUrl extends ServerRequestUrl {\n    constructor(task, apiKey, requestOptions) {\n        var _a, _b;\n        super(task, apiKey, requestOptions);\n        this.task = task;\n        this.apiKey = apiKey;\n        this.requestOptions = requestOptions;\n        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;\n        const baseUrl = ((_b = this.requestOptions) === null || _b === void 0 ? void 0 : _b.baseUrl) || DEFAULT_BASE_URL;\n        let initialUrl = baseUrl;\n        if (this.task === RpcTask.UPLOAD) {\n            initialUrl += `/upload`;\n        }\n        initialUrl += `/${apiVersion}/files`;\n        this._url = new URL(initialUrl);\n    }\n}\nfunction getHeaders(url) {\n    const headers = new Headers();\n    headers.append(\"x-goog-api-client\", getClientHeaders(url.requestOptions));\n    headers.append(\"x-goog-api-key\", url.apiKey);\n    return headers;\n}\nasync function makeServerRequest(url, headers, body, fetchFn = fetch) {\n    const requestInit = {\n        method: taskToMethod[url.task],\n        headers,\n    };\n    if (body) {\n        requestInit.body = body;\n    }\n    const signal = getSignal(url.requestOptions);\n    if (signal) {\n        requestInit.signal = signal;\n    }\n    return makeRequest(url.toString(), requestInit, fetchFn);\n}\n/**\n * Create an AbortSignal based on the timeout and signal in the\n * RequestOptions.\n */\nfunction getSignal(requestOptions) {\n    if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.signal) !== undefined || (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n        const controller = new AbortController();\n        if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n            setTimeout(() => controller.abort(), requestOptions.timeout);\n        }\n        if (requestOptions.signal) {\n            requestOptions.signal.addEventListener(\"abort\", () => {\n                controller.abort();\n            });\n        }\n        return controller.signal;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Class for managing GoogleAI file uploads.\n * @public\n */\nclass GoogleAIFileManager {\n    constructor(apiKey, _requestOptions = {}) {\n        this.apiKey = apiKey;\n        this._requestOptions = _requestOptions;\n    }\n    /**\n     * Upload a file.\n     */\n    async uploadFile(filePath, fileMetadata) {\n        const file = readFileSync(filePath);\n        const url = new FilesRequestUrl(RpcTask.UPLOAD, this.apiKey, this._requestOptions);\n        const uploadHeaders = getHeaders(url);\n        const boundary = generateBoundary();\n        uploadHeaders.append(\"X-Goog-Upload-Protocol\", \"multipart\");\n        uploadHeaders.append(\"Content-Type\", `multipart/related; boundary=${boundary}`);\n        const uploadMetadata = getUploadMetadata(fileMetadata);\n        // Multipart formatting code taken from @firebase/storage\n        const metadataString = JSON.stringify({ file: uploadMetadata });\n        const preBlobPart = \"--\" +\n            boundary +\n            \"\\r\\n\" +\n            \"Content-Type: application/json; charset=utf-8\\r\\n\\r\\n\" +\n            metadataString +\n            \"\\r\\n--\" +\n            boundary +\n            \"\\r\\n\" +\n            \"Content-Type: \" +\n            fileMetadata.mimeType +\n            \"\\r\\n\\r\\n\";\n        const postBlobPart = \"\\r\\n--\" + boundary + \"--\";\n        const blob = new Blob([preBlobPart, file, postBlobPart]);\n        const response = await makeServerRequest(url, uploadHeaders, blob);\n        return response.json();\n    }\n    /**\n     * List all uploaded files.\n     *\n     * Any fields set in the optional {@link SingleRequestOptions} parameter will take\n     * precedence over the {@link RequestOptions} values provided at the time of the\n     * {@link GoogleAIFileManager} initialization.\n     */\n    async listFiles(listParams, requestOptions = {}) {\n        const filesRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        const url = new FilesRequestUrl(RpcTask.LIST, this.apiKey, filesRequestOptions);\n        if (listParams === null || listParams === void 0 ? void 0 : listParams.pageSize) {\n            url.appendParam(\"pageSize\", listParams.pageSize.toString());\n        }\n        if (listParams === null || listParams === void 0 ? void 0 : listParams.pageToken) {\n            url.appendParam(\"pageToken\", listParams.pageToken);\n        }\n        const uploadHeaders = getHeaders(url);\n        const response = await makeServerRequest(url, uploadHeaders);\n        return response.json();\n    }\n    /**\n     * Get metadata for file with given ID.\n     *\n     * Any fields set in the optional {@link SingleRequestOptions} parameter will take\n     * precedence over the {@link RequestOptions} values provided at the time of the\n     * {@link GoogleAIFileManager} initialization.\n     */\n    async getFile(fileId, requestOptions = {}) {\n        const filesRequestOptions = Object.assign(Object.assign({}, this._requestOptions), requestOptions);\n        const url = new FilesRequestUrl(RpcTask.GET, this.apiKey, filesRequestOptions);\n        url.appendPath(parseFileId(fileId));\n        const uploadHeaders = getHeaders(url);\n        const response = await makeServerRequest(url, uploadHeaders);\n        return response.json();\n    }\n    /**\n     * Delete file with given ID.\n     */\n    async deleteFile(fileId) {\n        const url = new FilesRequestUrl(RpcTask.DELETE, this.apiKey, this._requestOptions);\n        url.appendPath(parseFileId(fileId));\n        const uploadHeaders = getHeaders(url);\n        await makeServerRequest(url, uploadHeaders);\n    }\n}\n/**\n * If fileId is prepended with \"files/\", remove prefix\n */\nfunction parseFileId(fileId) {\n    if (fileId.startsWith(\"files/\")) {\n        return fileId.split(\"files/\")[1];\n    }\n    if (!fileId) {\n        throw new GoogleGenerativeAIError(`Invalid fileId ${fileId}. ` +\n            `Must be in the format \"files/filename\" or \"filename\"`);\n    }\n    return fileId;\n}\nfunction generateBoundary() {\n    let str = \"\";\n    for (let i = 0; i < 2; i++) {\n        str = str + Math.random().toString().slice(2);\n    }\n    return str;\n}\nfunction getUploadMetadata(inputMetadata) {\n    if (!inputMetadata.mimeType) {\n        throw new GoogleGenerativeAIRequestInputError(\"Must provide a mimeType.\");\n    }\n    const uploadMetadata = {\n        mimeType: inputMetadata.mimeType,\n        displayName: inputMetadata.displayName,\n    };\n    if (inputMetadata.name) {\n        uploadMetadata.name = inputMetadata.name.includes(\"/\")\n            ? inputMetadata.name\n            : `files/${inputMetadata.name}`;\n    }\n    return uploadMetadata;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction formatSystemInstruction(input) {\n    // null or undefined\n    if (input == null) {\n        return undefined;\n    }\n    else if (typeof input === \"string\") {\n        return { role: \"system\", parts: [{ text: input }] };\n    }\n    else if (input.text) {\n        return { role: \"system\", parts: [input] };\n    }\n    else if (input.parts) {\n        if (!input.role) {\n            return { role: \"system\", parts: input.parts };\n        }\n        else {\n            return input;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Class for managing GoogleAI content caches.\n * @public\n */\nclass GoogleAICacheManager {\n    constructor(apiKey, _requestOptions) {\n        this.apiKey = apiKey;\n        this._requestOptions = _requestOptions;\n    }\n    /**\n     * Upload a new content cache\n     */\n    async create(createOptions) {\n        const newCachedContent = Object.assign({}, createOptions);\n        if (createOptions.ttlSeconds) {\n            if (createOptions.expireTime) {\n                throw new GoogleGenerativeAIRequestInputError(\"You cannot specify both `ttlSeconds` and `expireTime` when creating\" +\n                    \" a content cache. You must choose one.\");\n            }\n            if (createOptions.systemInstruction) {\n                newCachedContent.systemInstruction = formatSystemInstruction(createOptions.systemInstruction);\n            }\n            newCachedContent.ttl = createOptions.ttlSeconds.toString() + \"s\";\n            delete newCachedContent.ttlSeconds;\n        }\n        if (!newCachedContent.model) {\n            throw new GoogleGenerativeAIRequestInputError(\"Cached content must contain a `model` field.\");\n        }\n        if (!newCachedContent.model.includes(\"/\")) {\n            // If path is not included, assume it's a non-tuned model.\n            newCachedContent.model = `models/${newCachedContent.model}`;\n        }\n        const url = new CachedContentUrl(RpcTask.CREATE, this.apiKey, this._requestOptions);\n        const headers = getHeaders(url);\n        const response = await makeServerRequest(url, headers, JSON.stringify(newCachedContent));\n        return response.json();\n    }\n    /**\n     * List all uploaded content caches\n     */\n    async list(listParams) {\n        const url = new CachedContentUrl(RpcTask.LIST, this.apiKey, this._requestOptions);\n        if (listParams === null || listParams === void 0 ? void 0 : listParams.pageSize) {\n            url.appendParam(\"pageSize\", listParams.pageSize.toString());\n        }\n        if (listParams === null || listParams === void 0 ? void 0 : listParams.pageToken) {\n            url.appendParam(\"pageToken\", listParams.pageToken);\n        }\n        const headers = getHeaders(url);\n        const response = await makeServerRequest(url, headers);\n        return response.json();\n    }\n    /**\n     * Get a content cache\n     */\n    async get(name) {\n        const url = new CachedContentUrl(RpcTask.GET, this.apiKey, this._requestOptions);\n        url.appendPath(parseCacheName(name));\n        const headers = getHeaders(url);\n        const response = await makeServerRequest(url, headers);\n        return response.json();\n    }\n    /**\n     * Update an existing content cache\n     */\n    async update(name, updateParams) {\n        const url = new CachedContentUrl(RpcTask.UPDATE, this.apiKey, this._requestOptions);\n        url.appendPath(parseCacheName(name));\n        const headers = getHeaders(url);\n        const formattedCachedContent = Object.assign({}, updateParams.cachedContent);\n        if (updateParams.cachedContent.ttlSeconds) {\n            formattedCachedContent.ttl =\n                updateParams.cachedContent.ttlSeconds.toString() + \"s\";\n            delete formattedCachedContent.ttlSeconds;\n        }\n        if (updateParams.updateMask) {\n            url.appendParam(\"update_mask\", updateParams.updateMask.map((prop) => camelToSnake(prop)).join(\",\"));\n        }\n        const response = await makeServerRequest(url, headers, JSON.stringify(formattedCachedContent));\n        return response.json();\n    }\n    /**\n     * Delete content cache with given name\n     */\n    async delete(name) {\n        const url = new CachedContentUrl(RpcTask.DELETE, this.apiKey, this._requestOptions);\n        url.appendPath(parseCacheName(name));\n        const headers = getHeaders(url);\n        await makeServerRequest(url, headers);\n    }\n}\n/**\n * If cache name is prepended with \"cachedContents/\", remove prefix\n */\nfunction parseCacheName(name) {\n    if (name.startsWith(\"cachedContents/\")) {\n        return name.split(\"cachedContents/\")[1];\n    }\n    if (!name) {\n        throw new GoogleGenerativeAIError(`Invalid name ${name}. ` +\n            `Must be in the format \"cachedContents/name\" or \"name\"`);\n    }\n    return name;\n}\nfunction camelToSnake(str) {\n    return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);\n}\n\n/**\n * Processing state of the `File`.\n * @public\n */\nvar FileState;\n(function (FileState) {\n    // The default value. This value is used if the state is omitted.\n    FileState[\"STATE_UNSPECIFIED\"] = \"STATE_UNSPECIFIED\";\n    // File is being processed and cannot be used for inference yet.\n    FileState[\"PROCESSING\"] = \"PROCESSING\";\n    // File is processed and available for inference.\n    FileState[\"ACTIVE\"] = \"ACTIVE\";\n    // File failed processing.\n    FileState[\"FAILED\"] = \"FAILED\";\n})(FileState || (FileState = {}));\n\n/**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n * @public\n */\nvar FunctionDeclarationSchemaType;\n(function (FunctionDeclarationSchemaType) {\n    /** String type. */\n    FunctionDeclarationSchemaType[\"STRING\"] = \"STRING\";\n    /** Number type. */\n    FunctionDeclarationSchemaType[\"NUMBER\"] = \"NUMBER\";\n    /** Integer type. */\n    FunctionDeclarationSchemaType[\"INTEGER\"] = \"INTEGER\";\n    /** Boolean type. */\n    FunctionDeclarationSchemaType[\"BOOLEAN\"] = \"BOOLEAN\";\n    /** Array type. */\n    FunctionDeclarationSchemaType[\"ARRAY\"] = \"ARRAY\";\n    /** Object type. */\n    FunctionDeclarationSchemaType[\"OBJECT\"] = \"OBJECT\";\n})(FunctionDeclarationSchemaType || (FunctionDeclarationSchemaType = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @public\n */\nvar ExecutableCodeLanguage;\n(function (ExecutableCodeLanguage) {\n    ExecutableCodeLanguage[\"LANGUAGE_UNSPECIFIED\"] = \"language_unspecified\";\n    ExecutableCodeLanguage[\"PYTHON\"] = \"python\";\n})(ExecutableCodeLanguage || (ExecutableCodeLanguage = {}));\n/**\n * Possible outcomes of code execution.\n * @public\n */\nvar Outcome;\n(function (Outcome) {\n    /**\n     * Unspecified status. This value should not be used.\n     */\n    Outcome[\"OUTCOME_UNSPECIFIED\"] = \"outcome_unspecified\";\n    /**\n     * Code execution completed successfully.\n     */\n    Outcome[\"OUTCOME_OK\"] = \"outcome_ok\";\n    /**\n     * Code execution finished but with a failure. `stderr` should contain the\n     * reason.\n     */\n    Outcome[\"OUTCOME_FAILED\"] = \"outcome_failed\";\n    /**\n     * Code execution ran for too long, and was cancelled. There may or may not\n     * be a partial output present.\n     */\n    Outcome[\"OUTCOME_DEADLINE_EXCEEDED\"] = \"outcome_deadline_exceeded\";\n})(Outcome || (Outcome = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Possible roles.\n * @public\n */\n/**\n * Harm categories that would cause prompts or candidates to be blocked.\n * @public\n */\nvar HarmCategory;\n(function (HarmCategory) {\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n})(HarmCategory || (HarmCategory = {}));\n/**\n * Threshold above which a prompt or candidate will be blocked.\n * @public\n */\nvar HarmBlockThreshold;\n(function (HarmBlockThreshold) {\n    // Threshold is unspecified.\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    // Content with NEGLIGIBLE will be allowed.\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    // Content with NEGLIGIBLE and LOW will be allowed.\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    // Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    // All content will be allowed.\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(HarmBlockThreshold || (HarmBlockThreshold = {}));\n/**\n * Probability that a prompt or candidate matches a harm category.\n * @public\n */\nvar HarmProbability;\n(function (HarmProbability) {\n    // Probability is unspecified.\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    // Content has a negligible chance of being unsafe.\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    // Content has a low chance of being unsafe.\n    HarmProbability[\"LOW\"] = \"LOW\";\n    // Content has a medium chance of being unsafe.\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    // Content has a high chance of being unsafe.\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})(HarmProbability || (HarmProbability = {}));\n/**\n * Reason that a prompt was blocked.\n * @public\n */\nvar BlockReason;\n(function (BlockReason) {\n    // A blocked reason was not specified.\n    BlockReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n    // Content was blocked by safety settings.\n    BlockReason[\"SAFETY\"] = \"SAFETY\";\n    // Content was blocked, but the reason is uncategorized.\n    BlockReason[\"OTHER\"] = \"OTHER\";\n})(BlockReason || (BlockReason = {}));\n/**\n * Reason that a candidate finished.\n * @public\n */\nvar FinishReason;\n(function (FinishReason) {\n    // Default value. This value is unused.\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    // Natural stop point of the model or provided stop sequence.\n    FinishReason[\"STOP\"] = \"STOP\";\n    // The maximum number of tokens as specified in the request was reached.\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    // The candidate content was flagged for safety reasons.\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    // The candidate content was flagged for recitation reasons.\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    // The candidate content was flagged for using an unsupported language.\n    FinishReason[\"LANGUAGE\"] = \"LANGUAGE\";\n    // Unknown reason.\n    FinishReason[\"OTHER\"] = \"OTHER\";\n})(FinishReason || (FinishReason = {}));\n/**\n * Task type for embedding content.\n * @public\n */\nvar TaskType;\n(function (TaskType) {\n    TaskType[\"TASK_TYPE_UNSPECIFIED\"] = \"TASK_TYPE_UNSPECIFIED\";\n    TaskType[\"RETRIEVAL_QUERY\"] = \"RETRIEVAL_QUERY\";\n    TaskType[\"RETRIEVAL_DOCUMENT\"] = \"RETRIEVAL_DOCUMENT\";\n    TaskType[\"SEMANTIC_SIMILARITY\"] = \"SEMANTIC_SIMILARITY\";\n    TaskType[\"CLASSIFICATION\"] = \"CLASSIFICATION\";\n    TaskType[\"CLUSTERING\"] = \"CLUSTERING\";\n})(TaskType || (TaskType = {}));\n/**\n * @public\n */\nvar FunctionCallingMode;\n(function (FunctionCallingMode) {\n    // Unspecified function calling mode. This value should not be used.\n    FunctionCallingMode[\"MODE_UNSPECIFIED\"] = \"MODE_UNSPECIFIED\";\n    // Default model behavior, model decides to predict either a function call\n    // or a natural language repspose.\n    FunctionCallingMode[\"AUTO\"] = \"AUTO\";\n    // Model is constrained to always predicting a function call only.\n    // If \"allowed_function_names\" are set, the predicted function call will be\n    // limited to any one of \"allowed_function_names\", else the predicted\n    // function call will be any one of the provided \"function_declarations\".\n    FunctionCallingMode[\"ANY\"] = \"ANY\";\n    // Model will not predict any function call. Model behavior is same as when\n    // not passing any function declarations.\n    FunctionCallingMode[\"NONE\"] = \"NONE\";\n})(FunctionCallingMode || (FunctionCallingMode = {}));\n\nexport { ExecutableCodeLanguage, FileState, FunctionCallingMode, FunctionDeclarationSchemaType, GoogleAICacheManager, GoogleAIFileManager, Outcome };\n//# sourceMappingURL=index.mjs.map\n"],
  "mappings": "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",
  "names": ["Task", "RpcTask", "FileState", "FunctionDeclarationSchemaType", "ExecutableCodeLanguage", "Outcome", "HarmCategory", "HarmBlockThreshold", "HarmProbability", "BlockReason", "FinishReason", "TaskType", "FunctionCallingMode"]
}
