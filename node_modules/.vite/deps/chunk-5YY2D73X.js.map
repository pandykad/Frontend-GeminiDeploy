{
  "version": 3,
  "sources": ["../../ldrs/temp-ts-out/lib/LdrsBaseElement.js", "../../ldrs/temp-ts-out/elements/ring.js"],
  "sourcesContent": ["export default class LdrsBaseElement extends HTMLElement {\n    _propsToUpgrade = {};\n    shadow;\n    template;\n    defaultProps;\n    isAttached = false;\n    constructor() {\n        super();\n        this.shadow = this.attachShadow({ mode: 'open' });\n        this.template = document.createElement('template');\n    }\n    storePropsToUpgrade(props) {\n        props.forEach((prop) => {\n            if (this.hasOwnProperty(prop) && typeof this[prop] !== 'undefined') {\n                this._propsToUpgrade[prop] = this[prop];\n                delete this[prop];\n            }\n        });\n    }\n    upgradeStoredProps() {\n        Object.entries(this._propsToUpgrade).forEach(([key, val]) => {\n            this.setAttribute(key, val);\n        });\n    }\n    reflect(props) {\n        props.forEach((prop) => {\n            Object.defineProperty(this, prop, {\n                set(val) {\n                    if ('string,number'.includes(typeof val)) {\n                        this.setAttribute(prop, val.toString());\n                    }\n                    else {\n                        this.removeAttribute(prop);\n                    }\n                },\n                get() {\n                    return this.getAttribute(prop);\n                },\n            });\n        });\n    }\n    applyDefaultProps(props) {\n        this.defaultProps = props;\n        Object.entries(props).forEach(([key, defaultValue]) => {\n            this[key] = this[key] || defaultValue.toString();\n        });\n    }\n}\n", "import Base from '../lib/LdrsBaseElement.js';\nimport styles from './ring.scss';\nclass Ring extends Base {\n    _attributes = ['size', 'color', 'speed', 'stroke', 'bg-opacity'];\n    size;\n    color;\n    speed;\n    stroke;\n    'bg-opacity';\n    static get observedAttributes() {\n        return ['size', 'color', 'stroke', 'speed', 'bg-opacity'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 40,\n            color: 'black',\n            stroke: 5,\n            speed: 2,\n            'bg-opacity': 0,\n        });\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = sizeInt / 2;\n        const radius = Math.max(0, sizeInt / 2 - strokeInt / 2);\n        this.template.innerHTML = `\n      <svg\n        class=\"container\"\n        viewBox=\"0 0 ${this.size} ${this.size}\"\n        height=\"${this.size}\"\n        width=\"${this.size}\"\n      >\n        <circle \n          class=\"track\"\n          cx=\"${centerPoint}\" \n          cy=\"${centerPoint}\" \n          r=\"${radius}\" \n          pathlength=\"100\" \n          stroke-width=\"${this.stroke}px\" \n          fill=\"none\" \n        />\n        <circle \n          class=\"car\"\n          cx=\"${centerPoint}\" \n          cy=\"${centerPoint}\" \n          r=\"${radius}\" \n          pathlength=\"100\" \n          stroke-width=\"${this.stroke}px\" \n          fill=\"none\" \n        />\n      </svg>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n          --uib-bg-opacity: ${this['bg-opacity']};\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const styleEl = this.shadow.querySelector('style');\n        const svgEl = this.shadow.querySelector('svg');\n        const circleEls = this.shadow.querySelectorAll('circle');\n        if (!styleEl)\n            return;\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = String(sizeInt / 2);\n        const radius = String(Math.max(0, sizeInt / 2 - strokeInt / 2));\n        svgEl.setAttribute('height', this.stroke);\n        svgEl.setAttribute('width', this.stroke);\n        svgEl.setAttribute('viewBox', `0 0 ${sizeInt} ${sizeInt}`);\n        circleEls.forEach((circleEl) => {\n            circleEl.setAttribute('cx', centerPoint);\n            circleEl.setAttribute('cy', centerPoint);\n            circleEl.setAttribute('r', radius);\n            circleEl.setAttribute('stroke-width', this.stroke);\n        });\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${sizeInt}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n        --uib-bg-opacity: ${this['bg-opacity']};\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-ring') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Ring {\n            });\n        }\n    },\n    element: Ring,\n};\n"],
  "mappings": "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",
  "names": ["LdrsBaseElement", "HTMLElement", "constructor", "super", "_propsToUpgrade", "shadow", "template", "defaultProps", "isAttached", "this", "attachShadow", "mode", "document", "createElement", "storePropsToUpgrade", "props", "forEach", "prop", "hasOwnProperty", "upgradeStoredProps", "Object", "entries", "key", "val", "setAttribute", "reflect", "defineProperty", "set", "includes", "toString", "removeAttribute", "get", "getAttribute", "applyDefaultProps", "defaultValue", "Ring", "Base", "constructor", "super", "_attributes", "size", "color", "speed", "stroke", "this", "storePropsToUpgrade", "reflect", "observedAttributes", "connectedCallback", "upgradeStoredProps", "applyDefaultProps", "sizeInt", "parseInt", "strokeInt", "centerPoint", "radius", "Math", "max", "template", "innerHTML", "styles", "shadow", "replaceChildren", "content", "cloneNode", "attributeChangedCallback", "styleEl", "querySelector", "svgEl", "circleEls", "querySelectorAll", "String", "setAttribute", "forEach", "circleEl", "ring", "register", "name", "customElements", "get", "define", "element"]
}
